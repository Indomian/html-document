{"version":3,"sources":["../src/Document.js"],"names":[],"mappings":"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","file":"Document.js","sourcesContent":["/* global test */\nvar assert = require('proclaim');\nvar expect = assert.strictEqual;\nvar lib = '../../lib/';\n\nvar Document = require(lib + 'Document').Document;\nvar Doctype = require(lib + 'Doctype').Doctype;\n\ntest('create a Text Node', () => {\n  var document = new Document();\n  var textNode = document.createTextNode('Hello');\n\n  expect(textNode.textContent, 'Hello');\n});\n\ntest('create an HTMLElement', () => {\n  var document = new Document();\n  var h1 = document.createElement('h1');\n  expect(h1.outerHTML, '<h1></h1>');\n  expect(h1.innerHTML, '');\n  expect(h1.textContent, '');\n});\n\n\ntest('create an element and add nodes inside', () => {\n  var document = new Document();\n  var textNode = document.createTextNode('Hello');\n  var h1 = document.createElement('h1');\n  h1.setAttribute('id', 'title');\n\n  h1.appendChild(textNode);\n  expect(h1.outerHTML, '<h1 id=\"title\">Hello</h1>');\n  expect(h1.innerHTML, 'Hello');\n  expect(h1.textContent, 'Hello');\n\n  var span = document.createElement('span');\n  h1.appendChild(span);\n  expect(h1.outerHTML, '<h1 id=\"title\">Hello<span></span></h1>');\n  expect(h1.innerHTML, 'Hello<span></span>');\n  expect(h1.textContent, 'Hello');\n});\n\n\ntest('create elements without content', () => {\n  var document = new Document();\n  var span = document.createElement('span');\n  var textNode1 = document.createTextNode('Hello1');\n  var textNode2 = document.createTextNode('Hello2');\n  var br1 = document.createElement('br');\n  var br2 = document.createElement('br');\n  br2.setAttribute('class', 'test');\n\n  span.appendChild(textNode1);\n  span.appendChild(br1);\n  span.appendChild(br2);\n  span.appendChild(textNode2);\n  expect(span.outerHTML, '<span>' + span.innerHTML + '</span>');\n  expect(span.innerHTML, 'Hello1<br><br class=\"test\">Hello2');\n});\n\ntest('create a html layout', () => {\n    var document = new Document();\n    var fragment = document.createDocumentFragment();\n    fragment.appendChild(new Doctype());\n    var html = document.createElement('html');\n    fragment.appendChild(html);\n    var head = document.createElement('head');\n    html.appendChild(head);\n    var body = document.createElement('body');\n    html.appendChild(body);\n    expect(fragment.innerHTML, '<!DOCTYPE html><html><head></head><body></body></html>');\n});\n"]}