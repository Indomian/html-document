{"version":3,"sources":["../src/Document.js"],"names":[],"mappings":"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","file":"Document.js","sourcesContent":["/* global test */\nimport assert from 'proclaim';\nconst expect = assert.strictEqual;\n\nconst lib = '../../lib/';\n\nconst Document = require(lib + 'Document');\nconst Doctype = require(lib + 'Doctype');\n\ntest('create a Text Node', () => {\n    let document = new Document();\n    let textNode = document.createTextNode('Hello');\n\n    expect(textNode.textContent, 'Hello');\n});\n\ntest('create an HTMLElement', () => {\n    let document = new Document();\n    let h1 = document.createElement('h1');\n    expect(h1.outerHTML, '<h1></h1>');\n    expect(h1.innerHTML, '');\n    expect(h1.textContent, '');\n});\n\ntest('create an element and add nodes inside', () => {\n    let document = new Document();\n    let textNode = document.createTextNode('Hello');\n    let h1 = document.createElement('h1');\n    h1.setAttribute('id', 'title');\n\n    h1.appendChild(textNode);\n    expect(h1.outerHTML, '<h1 id=\"title\">Hello</h1>');\n    expect(h1.innerHTML, 'Hello');\n    expect(h1.textContent, 'Hello');\n\n    let span = document.createElement('span');\n    h1.appendChild(span);\n    expect(h1.outerHTML, '<h1 id=\"title\">Hello<span></span></h1>');\n    expect(h1.innerHTML, 'Hello<span></span>');\n    expect(h1.textContent, 'Hello');\n});\n\ntest('create elements without content', () => {\n    let document = new Document();\n    let span = document.createElement('span');\n    let textNode1 = document.createTextNode('Hello1');\n    let textNode2 = document.createTextNode('Hello2');\n    let br1 = document.createElement('br');\n    let br2 = document.createElement('br');\n    br2.setAttribute('class', 'test');\n\n    span.appendChild(textNode1);\n    span.appendChild(br1);\n    span.appendChild(br2);\n    span.appendChild(textNode2);\n    expect(span.outerHTML, '<span>' + span.innerHTML + '</span>');\n    expect(span.innerHTML, 'Hello1<br><br class=\"test\">Hello2');\n});\n\ntest('create a html layout', () => {\n    let document = new Document();\n    let fragment = document.createDocumentFragment();\n    fragment.appendChild(new Doctype());\n    let html = document.createElement('html');\n    fragment.appendChild(html);\n    let head = document.createElement('head');\n    html.appendChild(head);\n    let body = document.createElement('body');\n    html.appendChild(body);\n    expect(fragment.innerHTML, '<!DOCTYPE html><html><head></head><body></body></html>');\n});\n\ntest('process query selector', () => {\n    let document = new Document();\n    document.body.innerHTML = '<div><span class=\"second\">Text</span></div><i>Skip me</i><input type=\"text\"/>';\n    let element = document.querySelector('.first, input');\n    assert.equal(element.getAttribute('type'), 'text');\n});\n\ntest('process query selector all', () => {\n    let document = new Document();\n    document.body.innerHTML = '<div><span class=\"first\">Text</span></div><i>Skip me</i><input type=\"text\"/>';\n    let elements = document.querySelectorAll('.first, input');\n    assert.equal(elements.length, 2);\n    assert.equal(elements[0].textContent, 'Text');\n    assert.equal(elements[1].getAttribute('type'), 'text');\n});\n\ntest('process textContent', () => {\n    let document = new Document();\n    document.body.innerHTML = '<div><span class=\"first\">Text</span></div><i>Skip me</i><input type=\"text\"/>';\n    assert.isNull(document.textContent);\n});\n"]}