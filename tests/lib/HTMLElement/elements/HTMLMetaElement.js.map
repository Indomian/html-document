{"version":3,"sources":["../../../src/HTMLElement/elements/HTMLMetaElement.js"],"names":[],"mappings":"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","file":"HTMLMetaElement.js","sourcesContent":["/* global test */\nimport { strictEqual, isNull, throws, ok } from 'proclaim';\n\nconst lib = '../../../../lib/';\n\nconst HTMLMetaElement = require(lib + 'HTMLElement/elements/HTMLMetaElement');\nconst Document = require(lib + 'Document');\nconst DOMException = require(lib + 'DOMException');\n\ntest('HTMLMetaElement should have the nodeName == meta ', () => {\n    let elt = new HTMLMetaElement();\n    elt._ownerDocument = new Document();\n    strictEqual(elt.nodeName, 'meta');\n});\n\ntest('document.createElement should create object', () => {\n    const document = new Document();\n    let meta = document.createElement('meta');\n    ok(meta instanceof HTMLMetaElement);\n});\n\ntest('Should set and get content', () => {\n    let elt = new HTMLMetaElement();\n    elt._ownerDocument = new Document();\n    elt.content = 'Content';\n    strictEqual(elt.getAttribute('content'), 'Content');\n    elt.setAttribute('content', 'Other');\n    strictEqual(elt.content, 'Other');\n});\n\ntest('Should set and get httpEquiv', () => {\n    let elt = new HTMLMetaElement();\n    elt._ownerDocument = new Document();\n    elt.httpEquiv = 'Content';\n    strictEqual(elt.getAttribute('http-equiv'), 'Content');\n    elt.setAttribute('http-equiv', 'Other');\n    strictEqual(elt.httpEquiv, 'Other');\n});\n\ntest('Should set and get name', () => {\n    let elt = new HTMLMetaElement();\n    elt._ownerDocument = new Document();\n    elt.name = 'Content';\n    strictEqual(elt.getAttribute('name'), 'Content');\n    elt.setAttribute('name', 'Other');\n    strictEqual(elt.name, 'Other');\n});\n\ntest('Should fill attributes from tag', () => {\n    const document = new Document();\n    document.head.innerHTML = '<meta name=\"keywords\" content=\"some content\">';\n    let meta = document.head.firstChild;\n    strictEqual(meta.name, 'keywords');\n    strictEqual(meta.content, 'some content');\n});\n\ntest('Should return empty values if attributes not set', () => {\n    let elt = new HTMLMetaElement();\n    elt._ownerDocument = new Document();\n    strictEqual(elt.content, '');\n    strictEqual(elt.name, '');\n    strictEqual(elt.httpEquiv, '');\n});\n"]}