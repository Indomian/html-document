{"version":3,"sources":["../src/NodeList.js"],"names":[],"mappings":";;;;;wBACmB,UAAU;;;;AAE7B,IAAM,GAAG,GAAG,YAAY,CAAC;;AAEzB,IAAM,QAAQ,GAAG,OAAO,CAAC,GAAG,GAAG,UAAU,CAAC,CAAC;AAC3C,IAAM,QAAQ,GAAG,OAAO,CAAC,GAAG,GAAG,UAAU,CAAC,CAAC;;AAE3C,IAAI,CAAC,gBAAgB,EAAE,YAAM;AACzB,QAAM,QAAQ,GAAG,IAAI,QAAQ,EAAE,CAAC;AAChC,QAAM,GAAG,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;;AAE1C,QAAM,QAAQ,GAAG,IAAI,QAAQ,EAAE,CAAC;;AAEhC,0BAAO,WAAW,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;AACvC,YAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;AACpB,0BAAO,WAAW,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;;AAEvC,0BAAO,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;AACrC,0BAAO,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC;;AAE3C,0BAAO,WAAW,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;AAC1C,0BAAO,WAAW,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;CAC9C,CAAC,CAAC;;AAEH,IAAI,CAAC,mBAAmB,EAAE,YAAM;AAC5B,QAAM,QAAQ,GAAG,IAAI,QAAQ,EAAE,CAAC;AAChC,QAAM,IAAI,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;AAC3C,QAAM,IAAI,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;;AAE3C,QAAM,QAAQ,GAAG,IAAI,QAAQ,EAAE,CAAC;;AAEhC,YAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;AACrB,YAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;;AAErB,0BAAO,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;AACtC,0BAAO,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;;AAEtC,QAAI,KAAK,GAAG,CAAC,CAAC;;;;;;AACd,6BAAiB,QAAQ,8HAAE;gBAAlB,IAAI;;AACT,gBAAI,KAAK,EAAE,IAAI,CAAC,EAAE;AACd,sCAAO,WAAW,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;aAClC,MAAM;AACH,sCAAO,WAAW,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;aAClC;SACJ;;;;;;;;;;;;;;;;AACD,0BAAO,WAAW,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;CAChC,CAAC,CAAC","file":"NodeList.js","sourcesContent":["/* global test */\nimport assert from 'proclaim';\n\nconst lib = '../../lib/';\n\nconst Document = require(lib + 'Document');\nconst NodeList = require(lib + 'NodeList');\n\ntest('NodeList items', () => {\n    const document = new Document();\n    const div = document.createElement('div');\n\n    const nodeList = new NodeList();\n\n    assert.strictEqual(nodeList.length, 0);\n    nodeList._push(div);\n    assert.strictEqual(nodeList.length, 1);\n\n    assert.strictEqual(nodeList[0], div);\n    assert.strictEqual(nodeList[1], undefined);\n\n    assert.strictEqual(nodeList.item(0), div);\n    assert.strictEqual(nodeList.item(1), null);\n});\n\ntest('NodeList iterator', () => {\n    const document = new Document();\n    const div1 = document.createElement('div');\n    const div2 = document.createElement('div');\n\n    const nodeList = new NodeList();\n\n    nodeList._push(div1);\n    nodeList._push(div2);\n\n    assert.strictEqual(nodeList[0], div1);\n    assert.strictEqual(nodeList[1], div2);\n\n    let index = 0;\n    for (var item of nodeList) {\n        if (index++ == 0) {\n            assert.strictEqual(item, div1);\n        } else {\n            assert.strictEqual(item, div2);\n        }\n    }\n    assert.strictEqual(index, 2);\n});\n"]}