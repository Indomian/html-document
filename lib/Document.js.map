{"version":3,"sources":["../src/Document.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;qBAAiB,QAAQ;;;;uBACL,WAAW;;;;gCACF,oBAAoB;;;;2BACzB,eAAe;;;;oBACtB,QAAQ;;;;;;oDAGK,0CAA0C;;;;oDAC1C,0CAA0C;;;;kDAC5C,wCAAwC;;;;mDACvC,yCAAyC;;;;0DAClC,gDAAgD;;;;sDACpD,4CAA4C;;;;;;;;IAKvD,QAAQ;cAAR,QAAQ;;AACd,aADM,QAAQ,GACX;8BADG,QAAQ;;AAErB,mCAFa,QAAQ,6CAEb;;;;AAIR,YAAI,CAAC,eAAe,GAAG,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;;;;;AAKlD,YAAI,CAAC,IAAI,GAAG,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;AACvC,YAAI,CAAC,eAAe,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;;;;;AAK5C,YAAI,CAAC,IAAI,GAAG,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;AACvC,YAAI,CAAC,eAAe,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KAC/C;;;;;;;;;;;;;;;;;;;iBAnBgB,QAAQ;;eA6BZ,uBAAC,IAAI,EAAE;AAChB,gBAAI,OAAO,GAAG,yBAAY,IAAI,CAAC,CAAC;AAChC,mBAAO,CAAC,cAAc,GAAG,IAAI,CAAC;AAC9B,mBAAO,OAAO,CAAC;SAClB;;;;;;;;;;;;;;eASqB,kCAAG;AACrB,gBAAI,QAAQ,GAAG,mCAAsB,CAAC;AACtC,oBAAQ,CAAC,cAAc,GAAG,IAAI,CAAC;AAC/B,mBAAO,QAAQ,CAAC;SACnB;;;;;;;;;;;;;;;;eAUY,uBAAC,IAAI,EAAE;AAChB,gBAAI,OAAO,YAAA,CAAC;AACZ,oBAAQ,IAAI,CAAC,WAAW,EAAE;AACtB,qBAAK,QAAQ;AACT,2BAAO,GAAG,uDAAuB,CAAC;AAClC,0BAAM;AAAA,AACV,qBAAK,QAAQ;AACT,2BAAO,GAAG,uDAAuB,CAAC;AAClC,0BAAM;AAAA,AACV,qBAAK,MAAM;AACP,2BAAO,GAAG,qDAAqB,CAAC;AAChC,0BAAM;AAAA,AACV,qBAAK,OAAO;AACR,2BAAO,GAAG,sDAAsB,CAAC;AACjC,0BAAM;AAAA,AACV,qBAAK,OAAO,CAAC;AACb,qBAAK,OAAO,CAAC;AACb,qBAAK,OAAO;AACR,2BAAO,GAAG,6DAA6B,CAAC;AACxC,2BAAO,CAAC,QAAQ,GAAG,IAAI,CAAC;AACxB,0BAAM;AAAA,AACV,qBAAK,IAAI;AACL,2BAAO,GAAG,yDAAyB,CAAC;AACpC,0BAAM;AAAA,AACV;AACI,2BAAO,GAAG,8BAAiB,CAAC;AAC5B,2BAAO,CAAC,QAAQ,GAAG,IAAI,CAAC;AAAA,aAC/B;AACD,mBAAO,CAAC,cAAc,GAAG,IAAI,CAAC;AAC9B,mBAAO,OAAO,CAAC;SAClB;;;;;;;;;;;;;;;;eAUa,wBAAC,WAAW,EAAE;AACxB,gBAAI,IAAI,GAAG,sBAAS,WAAW,CAAC,CAAC;AACjC,gBAAI,CAAC,cAAc,GAAG,IAAI,CAAC;AAC3B,mBAAO,IAAI,CAAC;SACf;;;;;;;;;;;;;;;;eAUa,wBAAC,EAAE,EAAE;AACf,mBAAO,IAAI,CAAC,eAAe,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC;SAClD;;;;;;;;;;;;;;;;;;;;eAamB,8BAAC,OAAO,EAAE,MAAM,EAAE;AAClC,mBAAO,IAAI,CAAC,eAAe,CAAC,oBAAoB,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;SACrE;;;;;;oCAEqB,gCAAC,SAAS,EAAE;AAC9B,kBAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;SACtC;;;;;;;;;;;;;;;;;;eAYY,uBAAC,QAAQ,EAAE;AACpB,mBAAO,IAAI,CAAC,eAAe,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;SACvD;;;;;;;;;;;;;;;;;eAWe,0BAAC,QAAQ,EAAE;AACvB,mBAAO,IAAI,CAAC,eAAe,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;SAC1D;;;WA9JgB,QAAQ;;;qBAAR,QAAQ;AAoK7B,MAAM,CAAC,cAAc,CAAC,QAAQ,CAAC,SAAS,EAAE,UAAU,EAAE,EAAE,KAAK,EAAE,kBAAK,aAAa,EAAE,CAAC,CAAC","file":"Document.js","sourcesContent":["import Node from './Node';\nimport Comment from './Comment';\nimport DocumentFragment from './DocumentFragment';\nimport HTMLElement from './HTMLElement';\nimport Text from './Text';\n\n// HTML Elements\nimport HTMLOptionElement from './HTMLElement/elements/HTMLOptionElement';\nimport HTMLSelectElement from './HTMLElement/elements/HTMLSelectElement';\nimport HTMLMetaElement from './HTMLElement/elements/HTMLMetaElement';\nimport HTMLTableElement from './HTMLElement/elements/HTMLTableElement';\nimport HTMLTableSectionElement from './HTMLElement/elements/HTMLTableSectionElement';\nimport HTMLTableRowElement from './HTMLElement/elements/HTMLTableRowElement';\n\n/**\n * @see https://developer.mozilla.org/en/docs/Web/API/Document\n */\nexport default class Document extends Node {\n    constructor() {\n        super();\n        /**\n         * @type {HTMLElement}\n         */\n        this.documentElement = this.createElement('html');\n\n        /**\n         * @type {HTMLElement}\n         */\n        this.head = this.createElement('head');\n        this.documentElement.appendChild(this.head);\n\n        /**\n         * @type {HTMLElement}\n         */\n        this.body = this.createElement('body');\n        this.documentElement.appendChild(this.body);\n    }\n\n    /**\n     * Creates a new {@link Comment}.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/Document.createComment\n     *\n     * @param {string} data\n     * @return {Comment}\n    */\n    createComment(data) {\n        let comment = new Comment(data);\n        comment._ownerDocument = this;\n        return comment;\n    }\n\n    /**\n     * Creates a new empty {@link DocumentFragment}.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/Document.createDocumentFragment\n     *\n     * @return {DocumentFragment}\n    */\n    createDocumentFragment() {\n        let fragment = new DocumentFragment();\n        fragment._ownerDocument = this;\n        return fragment;\n    }\n\n    /**\n     * Creates a new element with the given tag name.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/Document.createElement\n     *\n     * @param {string} name\n     * @return {HTMLElement}\n    */\n    createElement(name) {\n        let element;\n        switch (name.toLowerCase()) {\n            case 'select':\n                element = new HTMLSelectElement();\n                break;\n            case 'option':\n                element = new HTMLOptionElement();\n                break;\n            case 'meta':\n                element = new HTMLMetaElement();\n                break;\n            case 'table':\n                element = new HTMLTableElement();\n                break;\n            case 'thead':\n            case 'tfoot':\n            case 'tbody':\n                element = new HTMLTableSectionElement();\n                element.nodeName = name;\n                break;\n            case 'tr':\n                element = new HTMLTableRowElement();\n                break;\n            default:\n                element = new HTMLElement();\n                element.nodeName = name;\n        }\n        element._ownerDocument = this;\n        return element;\n    }\n\n    /**\n     * Creates a text node.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/Document.createTextNode\n     *\n     * @param {string} textContent\n     * @return {Text}\n    */\n    createTextNode(textContent) {\n        let text = new Text(textContent);\n        text._ownerDocument = this;\n        return text;\n    }\n\n    /**\n     * Returns a reference to the element by its ID.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/Document.getElementById\n     *\n     * @param {string} id case-sensitive string representing the unique ID of the element being sought\n     * @return {Element} reference to an Element, or null if an element with the specified ID is not in the document.\n     */\n    getElementById(id) {\n        return this.documentElement.getElementById(id);\n    }\n\n    /**\n     * Returns an HTMLCollection of elements with the given tag name.\n     * The complete document is searched, including the root node.\n     * The returned HTMLCollection is live, meaning that it updates itself automatically to stay in sync\n     * with the DOM treewithout having to call document.getElementsByTagName() again.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/Document.getElementsByTagName\n     *\n     * @param {string} tagName\n     * @return {HTMLCollection}\n     */\n    getElementsByTagName(tagName, _array) {\n        return this.documentElement.getElementsByTagName(tagName, _array);\n    }\n\n    getElementsByClassName(className) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Returns the first element within the document (using depth-first pre-order traversal of the document's nodes|by\n     * first element in document markup and iterating through sequential nodes by order of amount of child nodes)\n     * that matches the specified group of selectors.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector\n     *\n     * @param {string} selector\n     * @return {Element}\n     */\n    querySelector(selector) {\n        return this.documentElement.querySelector(selector);\n    }\n\n    /**\n     * Returns a list of the elements within the document (using depth-first pre-order traversal of the document's\n     * nodes) that match the specified group of selectors. The object returned is a NodeList.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll\n     *\n     * @param {string} selector\n     * @return {NodeList}\n     */\n    querySelectorAll(selector) {\n        return this.documentElement.querySelectorAll(selector);\n    }\n}\n\n/**\n * @constant {number} Comment#nodeType\n */\nObject.defineProperty(Document.prototype, 'nodeType', { value: Node.DOCUMENT_NODE });\n"]}