{"version":3,"sources":["../src/Event.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;IAOqB,KAAK;;;;;AAIX,WAJM,KAAK,CAIV,IAAI,EAAE;0BAJD,KAAK;;;;;;;AAUlB,QAAI,CAAC,OAAO,GAAG,KAAK,CAAC;;;;;;;AAOrB,QAAI,CAAC,UAAU,GAAG,KAAK,CAAC;;;;;;;AAOxB,QAAI,CAAC,aAAa,GAAG,KAAK,CAAC;;;;;;;AAO3B,QAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC;;;;;;;AAO9B,QAAI,CAAC,UAAU,GAAG,CAAC,CAAC;;;;;;;AAOpB,QAAI,CAAC,MAAM,GAAG,IAAI,CAAC;;;;;;;AAOnB,QAAI,CAAC,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC;;;;;;;AAOnC,QAAI,CAAC,IAAI,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;;;;;;;;AAQ/B,QAAI,CAAC,SAAS,GAAG,KAAK,CAAC;GAC1B;;;;;;;;eApEgB,KAAK;;WAwER,0BAAG;AACb,UAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;KAChC;;;;;;;;;WAIuB,oCAAG;AACvB,UAAI,CAAC,2BAA2B,GAAG,IAAI,CAAC;AACxC,UAAI,CAAC,eAAe,EAAE,CAAC;KAC1B;;;;;;;;;WAIc,2BAAG;AACd,UAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;KAClC;;;;;;;;;;WAK4B,yCAAG;AAC5B,aAAO,IAAI,CAAC,2BAA2B,CAAC;KAC3C;;;SA9FgB,KAAK;;;qBAAL,KAAK","file":"Event.js","sourcesContent":["/**\n * The Element interface represents an object within a DOM document.\n * This interface describes methods and properties common to all kinds of elements.\n * Specific behaviors are described in interfaces which inherit from Element but add additional functionality.\n *\n * @see https://developer.mozilla.org/en/docs/Web/API/Event\n */\nexport default class Event {\n    /**\n     * @param {string} type\n     */\n    constructor(type) {\n        /**\n         * A boolean indicating whether the event bubbles up through the DOM or not.\n         * @type {boolean}\n         * @readonly\n         */\n        this.bubbles = false;\n\n        /**\n         * A boolean indicating whether the event is cancelable.\n         * @type {boolean}\n         * @readonly\n         */\n        this.cancelable = false;\n\n        /**\n         * A reference to the currently registered target for the event.\n         * @type {HTMLElement}\n         * @readonly\n         */\n        this.currentTarget = false;\n\n        /**\n         * Indicates whether or not event.preventDefault() has been called on the event.\n         * @type {boolean}\n         * @readonly\n         */\n        this.defaultPrevented = false;\n\n        /**\n         * Indicates which phase of the event flow is being processed.\n         * @type {number}\n         * @readonly\n         */\n        this.eventPhase = 0;\n\n        /**\n         * A reference to the target to which the event was originally dispatched.\n         * @type {HTMLElement}\n         * @readonly\n         */\n        this.target = null;\n\n        /**\n         * The time that the event was created.\n         * @type {number}\n         * @readonly\n         */\n        this.timeStamp = Date.now() * 1000;\n\n        /**\n         * The name of the event (case-insensitive).\n         * @type {string}\n         * @readonly\n         */\n        this.type = type.toLowerCase();\n\n        /**\n         * Indicates whether or not the event was initiated by the browser (after a user click for instance)\n         * or by a script (using an event creation method)\n         * @type {boolean}\n         * @readonly\n         */\n        this.isTrusted = false;\n    }\n\n    /**\n     */\n    preventDefault() {\n        this.defaultPrevented = true;\n    }\n\n    /**\n     */\n    stopImmediatePropagation() {\n        this.immediatePropagationStopped = true;\n        this.stopPropagation();\n    }\n\n    /**\n     */\n    stopPropagation() {\n        this.propagationStopped = true;\n    }\n\n    /**\n     * @return {boolean}\n     */\n    isImmediatePropagationStopped() {\n        return this.immediatePropagationStopped;\n    }\n}\n"]}