{"version":3,"sources":["../src/Element.js"],"names":[],"mappings":"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","file":"Element.js","sourcesContent":["import Node from './Node';\nimport ParentNode from './ParentNode';\nimport CssSelectorParser from 'css-selector-parser';\n\n/**\n * The Element interface represents an object within a DOM document.\n * This interface describes methods and properties common to all kinds of elements.\n * Specific behaviors are described in interfaces which inherit from Element but add additional functionality.\n *\n * @see https://developer.mozilla.org/en/docs/Web/API/Element\n * @class Element\n * @extends ParentNode\n */\n/**\n * The Element.innerHTML property sets or gets the HTML syntax describing the element's descendants.\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML\n * @member {String} Element#innerHTML\n */\n/**\n * The outerHTML attribute of the element DOM interface gets the serialized HTML fragment\n * describing the element including its descendants.\n * It can be set to replace the element with nodes parsed from the given string.\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/outerHTML\n * @member {String} Element#outerHTML\n */\n\nexport default class Element extends ParentNode {\n    /**\n     * The id of the element.\n     *\n     * @member {String} Element#id\n     */\n    get id() {\n        return this.getAttribute('id');\n    }\n\n    /**\n     * @ignore\n     * @param {String} id\n     */\n    set id(id) {\n        this.setAttribute('id', id);\n    }\n\n    /**\n     * The tag name of the element.\n     *\n     * @member {String} Element#tagName\n     * @readonly\n     */\n    get tagName() {\n        return this.nodeName;\n    }\n\n    /**\n     * Returns a live {@link HTMLCollection} containing all objects of type {@link Element}\n     * that are children of this ParentNode.\n     *\n     * Note: this currently returns a non-live array.\n     *\n     * later type {HTMLCollection}\n     *\n     * @member {Array.<Element>} Element#children\n     * @readonly\n     */\n    get children() {\n        return this._childNodes.filter((n) => n instanceof Element);\n    }\n\n    /**\n     * Returns the {@link Element} that is the first child of this ParentNode, or null if there is none.\n     *\n     * @member {Element} Element#firstElementChild\n     * @readonly\n     */\n    get firstElementChild() {\n        return this._childNodes[0] || null;\n    }\n\n    /**\n     * Returns the {@link Element} that is the first child of this ParentNode, or null if there is none.\n     *\n     * @member {Element} Element#lastElementChild\n     * @readonly\n     */\n    get lastElementChild() {\n        return this._childNodes.length === 0 ? null : this._childNodes[this._childNodes.length - 1];\n    }\n\n    /**\n     * Returns an unsigned long giving the amount of children that the object has.\n     *\n     * @member {Number} Element#childElementCount\n     * @readonly\n     */\n    get childElementCount() {\n        return this._childNodes.length;\n    }\n\n    /**\n     * Returns a reference to the element by its ID.\n     *\n     * @method Element#getElementById\n     * @param {String} id case-sensitive string representing the unique ID of the element being sought\n     * @return {Element} reference to an Element, or null if an element with the specified ID is not in the document.\n     */\n    getElementById(id) {\n        return this._childNodesRecursiveFind(e => {\n            return e instanceof Element && e.getAttribute('id') === id;\n        }) || null;\n    }\n\n    /**\n     * Returns an HTMLCollection of elements with the given tag name.\n     * The complete document is searched, including the root node.\n     * The returned HTMLCollection is live, meaning that it updates itself automatically to stay in sync\n     * with the DOM treewithout having to call document.getElementsByTagName() again.\n     *\n     * @method Element#getElementsByTagName\n     * @param {String} tagName\n     * @return {HTMLCollection}\n     */\n    getElementsByTagName(tagName, _array) {\n        if (!tagName) {\n            return !_array ? this.children.slice()\n                         : _array.push.apply(_array, this.children);\n        }\n\n        _array = _array || [];\n        tagName = tagName.toLowerCase();\n        this.children.forEach((e) => {\n            if (e.nodeName.toLowerCase() === tagName) {\n                _array.push(e);\n            }\n        });\n        return _array;\n    }\n\n    /**\n     * Returns the first element that is a descendant of the element on which it is invoked that matches the\n     * specified group of selectors.\n     * @param {String} query CSS query for selecting element\n     * @return {Element} reference to an Element, or null if element was not found\n     */\n    querySelector(query) {\n        let parser = new CssSelectorParser.CssSelectorParser();\n        let rules = parser.parse(query);\n        var result = null;\n\n        /**\n         * Function process all selectors\n         * @param element\n         * @param selectors\n         * @returns {boolean}\n         */\n        var processSelectors = (element, selectors) => {\n            return selectors.every((selector) => {\n                processRule(element, selector.rule);\n            });\n        };\n\n        /**\n         * Function process one rule on element\n         * @param element\n         * @param rule\n         * @returns {boolean}\n         */\n        var processRule = (element, rule) => {\n\n            /**\n             * Function processes one element using current rule\n             * @param element\n             * @returns {boolean|false}\n             */\n            var processElement = (element) => {\n                var itsMe = true;\n\n                if (itsMe && rule.hasOwnProperty('tagName')) {\n                    itsMe &= element.tagName === rule.tagName;\n                }\n\n                if (itsMe && rule.hasOwnProperty('classNames')) {\n                    itsMe &= rule.classNames.some((name)=> {\n                        return element.classList.contains(name);\n                    });\n                }\n\n                if (itsMe && rule.hasOwnProperty('attrs')) {\n                    itsMe &= rule.attrs.some((attr)=> {\n                        return element.hasAttribute(attr.name) && element.getAttribute(attr.name) === attr.value;\n                    });\n                }\n\n                if (!itsMe) {\n                    return processRule(element, rule);\n                }\n\n                if (rule.hasOwnProperty('rule')) {\n                    return processRule(element, rule.rule);\n                } else {\n                    result = element;\n                }\n\n                return !true;\n            };\n\n            return element.children.every(processElement);\n        };\n\n        if (rules.type === 'selectors') {\n            processSelectors(this, rules.selectors);\n        } else if (rules.type === 'ruleSet') {\n            processRule(this, rules.rule);\n        }\n\n        return result;\n    }\n}\n\n/**\n * @constant {string} Comment#nodeType\n */\nObject.defineProperty(Element.prototype, 'nodeType', { value: Node.ELEMENT_NODE });\n"]}