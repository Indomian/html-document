{"version":3,"sources":["../src/Element.js"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,IAAI,IAAI,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC;AAClC,IAAI,UAAU,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC,UAAU,CAAC;;;;;;;;IAOvC,OAAO;aAAP,OAAO;8BAAP,OAAO;;mCAAP,OAAO;;;cAAP,OAAO;;iBAAP,OAAO;;;;;;;;;eA4EF,wBAAC,EAAE,EAAE;AACf,mBAAO,IAAI,CAAC,wBAAwB,CAAC,UAAC,CAAC,EAAK;AACxC,oBAAI,CAAC,YAAY,OAAO,IAAI,CAAC,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,EAAE,EAAE;AACrD,2BAAO,IAAI,CAAC;iBACf;aACJ,CAAC,IAAI,IAAI,CAAC;SACd;;;;;;;;;;;;;eAWmB,8BAAC,OAAO,EAAE,MAAM,EAAE;AAClC,gBAAI,CAAC,OAAO,EAAE;AACV,uBAAO,CAAC,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,GACvB,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;aAC3D;AACD,kBAAM,GAAG,MAAM,IAAI,EAAE,CAAC;AACtB,mBAAO,GAAG,OAAO,CAAC,WAAW,EAAE,CAAC;AAChC,gBAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAC,CAAC,EAAK;AACzB,oBAAI,CAAC,CAAC,QAAQ,CAAC,WAAW,EAAE,KAAK,OAAO,EAAE;AACtC,0BAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;iBAClB;aACJ,CAAC,CAAC;AACH,mBAAO,MAAM,CAAC;SACjB;;;;;;;;;aAlGK,eAAG;AACL,mBAAO,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;SAClC;;;;;;;aAOK,aAAC,EAAE,EAAE;AACP,gBAAI,CAAC,YAAY,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;SAC/B;;;;;;;;;aAOU,eAAG;AACV,mBAAO,IAAI,CAAC,QAAQ,CAAC;SACxB;;;;;;;;;;;;aAWW,eAAG;AACX,mBAAO,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,UAAC,CAAC;uBAAK,CAAC,YAAY,OAAO;aAAA,CAAC,CAAC;SAC/D;;;;;;;;;aAOoB,eAAG;AACpB,mBAAO,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC;SACtC;;;;;;;;;aAOmB,eAAG;AACnB,mBAAO,IAAI,CAAC,WAAW,CAAC,MAAM,KAAK,CAAC,GAAG,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,GAAE,CAAC,CAAC,CAAC;SAC9F;;;;;;;;;aAOoB,eAAG;AACpB,mBAAO,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC;SAClC;;;WApEQ,OAAO;GAAS,UAAU;;QAA1B,OAAO,GAAP,OAAO;;AA8GpB,MAAM,CAAC,cAAc,CAAC,OAAO,CAAC,SAAS,EAAE,UAAU,EAAE,EAAE,KAAK,EAAE,IAAI,CAAC,YAAY,EAAE,CAAC,CAAC","file":"Element.js","sourcesContent":["var Node = require('./Node').Node;\nvar ParentNode = require('./ParentNode').ParentNode;\n\n/**\n * The Element interface represents an object within a DOM document.\n * This interface describes methods and properties common to all kinds of elements.\n * Specific behaviors are described in interfaces which inherit from Element but add additional functionality.\n */\nexport class Element extends ParentNode {\n\n\n    /**\n     * Gets the id of the element.\n     *\n     * @return {String}\n     */\n    get id() {\n        return this.getAttribute('id');\n    }\n\n    /**\n     * Sets the id of the element.\n     *\n     * @param {String} id\n     */\n    set id(id) {\n        this.setAttribute('id', id);\n    }\n\n    /**\n     * Gets the tagName of the element.\n     *\n     * @return {String}\n     */\n    get tagName() {\n        return this.nodeName;\n    }\n\n\n    /**\n     * Returns a live {@link HTMLCollection} containing all objects of type {@link Element}\n     * that are children of this ParentNode.\n     *\n     * Note: this currently returns a non-live array.\n     *\n     * @return {HTMLCollection}\n     */\n    get children() {\n        return this._childNodes.filter((n) => n instanceof Element);\n    }\n\n    /**\n     * Returns the {@link Element} that is the first child of this ParentNode, or null if there is none.\n     *\n     * @return {Element}\n     */\n    get firstElementChild() {\n        return this._childNodes[0] || null;\n    }\n\n    /**\n     * Returns the {@link Element} that is the first child of this ParentNode, or null if there is none.\n     *\n     * @return {Element}\n     */\n    get lastElementChild() {\n        return this._childNodes.length === 0 ? null : this._childNodes[this._childNodes.length -1];\n    }\n\n    /**\n     * Returns an unsigned long giving the amount of children that the object has.\n     *\n     * @return {Number}\n     */\n    get childElementCount() {\n        return this._childNodes.length;\n    }\n\n    /**\n     * Returns a reference to the element by its ID.\n     *\n     * @param {String} id case-sensitive string representing the unique ID of the element being sought\n     * @return {Element} reference to an Element, or null if an element with the specified ID is not in the document.\n     */\n    getElementById(id) {\n        return this._childNodesRecursiveFind((e) => {\n            if (e instanceof Element && e.getAttribute('id') === id) {\n                return true;\n            }\n        }) || null;\n    }\n\n    /**\n     * Returns an HTMLCollection of elements with the given tag name.\n     * The complete document is searched, including the root node.\n     * The returned HTMLCollection is live, meaning that it updates itself automatically to stay in sync\n     * with the DOM treewithout having to call document.getElementsByTagName() again.\n     *\n     * @param {String} tagName\n     * @return {HTMLCollection}\n     */\n    getElementsByTagName(tagName, _array) {\n        if (!tagName) {\n            return !_array ? this.children.slice()\n                         : _array.push.apply(_array, this.children);\n        }\n        _array = _array || [];\n        tagName = tagName.toLowerCase();\n        this.children.forEach((e) => {\n            if (e.nodeName.toLowerCase() === tagName) {\n                _array.push(e);\n            }\n        });\n        return _array;\n    }\n\n}\n\nObject.defineProperty(Element.prototype, 'nodeType', { value: Node.ELEMENT_NODE });\n"]}