{"version":3,"sources":["../../../src/HTMLElement/elements/HTMLOptionElement.js"],"names":[],"mappings":"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","file":"HTMLOptionElement.js","sourcesContent":["var HTMLElement = require('../../HTMLElement').HTMLElement;\n\n/**\n * The HTMLOptionElement interface represents <option> elements\n * and inherits all classes and methods of the HTMLElement interface.\n */\nexport class HTMLOptionElement extends HTMLElement {\n    constructor() {\n        super();\n        this.nodeName = 'option';\n    }\n\n    /**\n     * Contains the initial value of the selected HTML attribute,\n     * indicating whether the option is selected by default or not.\n     *\n     * @return {Boolean}\n     */\n    get defaultSelected() {\n        throw new Error('Unsuported');\n    }\n\n    /**\n     * Contains the initial value of the selected HTML attribute,\n     * indicating whether the option is selected by default or not.\n     *\n     * @param {Boolean} selected\n     */\n    set defaultSelected(selected) {\n        throw new Error('Unsuported');\n    }\n\n    /**\n     * Reflects the value of the disabled HTML attribute, which indicates that the option is unavailable to be selected.\n     * An option can also be disabled if it is a child of an <optgroup> element that is disabled.\n     *\n     * @return {Boolean}\n     */\n    get disabled() {\n        return !!this.getAttribute('disabled')\n             && (this.parentNode.nodeName !== 'optgroup' || !this.parentNode.disabled);\n    }\n\n    /**\n     * Reflects the value of the disabled HTML attribute, which indicates that the option is unavailable to be selected.\n     *\n     * @param {Boolean} disabled\n     */\n    set disabled(disabled) {\n        if (disabled) {\n            this.setAttribute('disabled', 'disabled');\n        } else {\n            this.removeAttribute('disabled');\n        }\n    }\n\n    /**\n     * If the option is a descendent of a <select> element, then this property has the same value as\n     * the form property of the corresponding HTMLSelectElement object; otherwise, it is null.\n     *\n     * @return {HTMLFormElement}\n     */\n    get form() {\n        throw new Error('Not implemented');\n    }\n\n    set form(value) {\n        throw new Error('form is read only');\n    }\n\n    /**\n     * The position of the option within the list of options it belongs to, in tree-order.\n     * If the option is not part of a list of options, like when it is part of the <datalist> element, the value is 0.\n     *\n     * @return {Number}\n     */\n    get index() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * The position of the option within the list of options it belongs to, in tree-order.\n     * If the option is not part of a list of options, like when it is part of the <datalist> element, the value is 0.\n     *\n     */\n    set index(value) {\n        throw new Error('index is read only');\n    }\n\n    /**\n     * Reflects the value of the label HTML attribute, which provides a label for the option.\n     * If this attribute isn't specifically set, reading it returns the element's text content.\n     *\n     * @return {Number}\n     */\n    get label() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Reflects the value of the label HTML attribute, which provides a label for the option.\n     * If this attribute isn't specifically set, reading it returns the element's text content.\n     *\n     * @param {Number}\n     */\n    set label(label) {\n        throw new Error('Not implemented');\n    }\n\n    get _select() {\n        var node = this;\n        while (node = node.parentNode) {\n            if (node.nodeName === 'select') {\n                return node;\n            }\n        }\n        return null;\n    }\n\n    /**\n     * Indicates whether the option is currently selected.\n     *\n     * @return {Boolean}\n     */\n    get selected() {\n        return !!this.getAttribute('selected');\n    }\n\n    /**\n     * Indicates whether the option is currently selected.\n     *\n     * @param {Boolean} selected\n     */\n    set selected(selected) {\n        if (selected) {\n            var selectElement = this._select;\n            if (!selectElement.multiple) {\n                var selectedOption = selectElement.selectedOption;\n                if (selectedOption) {\n                    selectedOption.selected = false;\n                }\n            }\n            this.setAttribute('selected', 'selected');\n        } else {\n            this.removeAttribute('selected');\n        }\n    }\n\n    /**\n     * Contains the text content of the element.\n     *\n     * @return {String}\n     */\n    get text() {\n        return this.textContent;\n    }\n\n    /**\n     * Contains the text content of the element.\n     *\n     * @param {String} text\n     */\n    set text(text) {\n        while (this.firstChild) {\n            this.removeChild(this.firstChild);\n        }\n        this.appendChild(this.ownerDocument.createTextNode(text));\n    }\n\n    /**\n     * Reflects the value of the value HTML attribute, if it exists;\n     * otherwise reflects value of the Node.textContent property.\n     *\n     * @return {String}\n     */\n    get value() {\n        var value = this.getAttribute('value');\n        return value === null ? this.textContent : value;\n    }\n\n    /**\n     * Reflects the value of the value HTML attribute, if it exists;\n     * otherwise reflects value of the Node.textContent property.\n     *\n     * @param {String} value\n     */\n    set value(value) {\n        if (value) {\n            this.setAttribute('value', value);\n        } else {\n            this.removeAttribute('value');\n        }\n    }\n\n}\n"]}