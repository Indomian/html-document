{"version":3,"sources":["../../../src/HTMLElement/elements/HTMLSelectElement.js"],"names":[],"mappings":"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","file":"HTMLSelectElement.js","sourcesContent":["var HTMLElement = require('../../HTMLElement');\n\n/**\n * HTML <select> elements share all of the properties and methods\n * of other HTML elements described in the element section.\n * They also have the specialized interface HTMLSelectElement.\n */\nexport default class HTMLSelectElement extends HTMLElement {\n    constructor() {\n        super();\n        this.nodeName = 'select';\n    }\n\n\n    get autoFocus() {\n        throw new Error('Not implemented');\n    }\n\n    set autoFocus(value) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * The form that this element is associated with. If this element is a descendant of a form element,\n     * then this attribute is the ID of that form element.\n     * If the element is not a descendant of a form element, then:\n     * The attribute can be the ID of any form element in the same document.\n     *\n     * @return {HTMLFormElement}\n     */\n    get form() {\n        throw new Error('Not implemented');\n    }\n\n    set form(value) {\n        throw new Error('form is read only');\n    }\n\n    get labels() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Reflects the disabled HTML attribute, which indicates whether the control is disabled.\n     * If it is disabled, it does not accept clicks.\n     *\n     * @return {Boolean}\n     */\n    get disabled() {\n        return !!this.getAttribute('disabled');\n    }\n\n    /**\n     * Reflects the disabled HTML attribute, which indicates whether the control is disabled.\n     * If it is disabled, it does not accept clicks.\n     *\n     * @param {Boolean} disabled\n     */\n    set disabled(disabled) {\n        if (disabled) {\n            this.setAttribute('disabled', 'disabled');\n        } else {\n            this.removeAttribute('disabled');\n        }\n    }\n\n    /**\n     * The number of <option> elements in this select element.\n     *\n     * @return {Number}\n     */\n    get length() {\n        return this.options.length;\n    }\n\n    set length(value) {\n        throw new Error('Length is read only');\n    }\n\n\n    /**\n     * Reflects the multiple HTML attribute, whichindicates whether multiple items can be selected.\n     *\n     * @return {Boolean}\n     */\n    get multiple() {\n        return !!this.getAttribute('multiple');\n    }\n\n    /**\n     * Reflects the multiple HTML attribute, whichindicates whether multiple items can be selected.\n     *\n     * @param {Boolean} multiple\n     */\n    set multiple(multiple) {\n        if (multiple) {\n            this.setAttribute('multiple', 'multiple');\n        } else {\n            this.removeAttribute('multiple');\n        }\n    }\n\n    /**\n     * Reflects the name HTML attribute, containing the name of this control used by servers and DOM search functions.\n     */\n    get name() {\n        return this.getAttribute('name');\n    }\n\n    /**\n     * Reflects the name HTML attribute, containing the name of this control used by servers and DOM search functions.\n     *\n     * @param {String} name\n     */\n    set name(name) {\n        this.setAttribute('name', name);\n    }\n\n    /**\n     * The set of <option> elements contained by this element. Read only.\n     */\n    get options() {\n        return this.getElementsByTagName('option');\n    }\n\n    set options(value) {\n        throw new Error('options is read only');\n    }\n\n    /**\n     * Reflects the required HTML attribute, which indicates whether the user is required\n     * to select a value before submitting the form\n     *\n     * @return {Boolean}\n     */\n    get required() {\n        return !!this.getAttribute('required');\n    }\n\n    /**\n     * Reflects the required HTML attribute, which indicates whether the user is required\n     * to select a value before submitting the form\n     *\n     * @param {Boolean} required\n     */\n    set required(required) {\n        if (required) {\n            this.setAttribute('required', 'required');\n        } else {\n            this.removeAttribute('required');\n        }\n    }\n\n    /**\n     * The index of the first selected <option> element. The value -1 is returned if no element is selected.\n     *\n     * @return {Number}\n     */\n    get selectedIndex() {\n        var index = -1;\n        var options = this.options;\n        if (!options.length) {\n            return index;\n        }\n        options.some(function(option, i) {\n            if (option.selected) {\n                index = i;\n                return true;\n            }\n        });\n        if (index === -1 && !this.multiple) {\n            options.some(function(option, i) {\n                if (option.value === '') {\n                    index = i;\n                    return true;\n                }\n            });\n            if (index === -1) {\n                return 0;\n            }\n        }\n        return index;\n    }\n\n    /**\n     * The index of the first selected <option> element. The value -1 is returned if no element is selected.\n     *\n     * @return {Number}\n     */\n    set selectedIndex(index) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * The set of options that are selected.\n     *\n     * @return {HTMLCollection}\n     */\n    get selectedOptions() {\n        return this.options.filter(function(option) {\n            return option.selected;\n        });\n    }\n\n    /**\n     * The first selected option.\n     *\n     * @return HTMLOptionElement\n     */\n    get selectedOption() {\n        var selectedOption;\n        this.options.some(function(option) {\n            if (option.selected) {\n                selectedOption = option;\n                return true;\n            }\n        });\n        return selectedOption;\n    }\n\n    /**\n     * Reflects the size HTML attribute, which contains the number of visible items in the control.\n     * The default is 1, unless multiple is true, in which case it is 4.\n     *\n     * @return {Number}\n     */\n    get size() {\n        return Number(this.getAttribute('size')) || (this.multiple ? 4 : 1);\n    }\n\n    /**\n     * Reflects the size HTML attribute, which contains the number of visible items in the control.\n     *\n     * @param {String} name\n     */\n    set size(size) {\n        this.setAttribute('size', size);\n    }\n\n\n\n    get tabIndex() {\n        throw new Error('Obsolete since HTML5');\n    }\n\n    /**\n     * The form control's type. When multiple is true, it returns select-multiple; otherwise, it returns select-one.\n     * Read only.\n     *\n     * @return {String}\n     */\n    get type() {\n        return this.multiple ? 'select-multiple' : 'select-one';\n    }\n\n    set type(value) {\n        throw new Error('type is read only');\n    }\n\n    get validationMessage() {\n        throw new Error('Not implemented');\n    }\n\n    set validationMessage(value) {\n        throw new Error('validationMessage is read only');\n    }\n\n    get validity() {\n        throw new Error('Not implemented');\n    }\n\n    set validity(value) {\n        throw new Error('validity is read only');\n    }\n\n    /**\n     * The value of this form control, that is, of the first selected option.\n     *\n     * @return {String}\n     */\n    get value() {\n        return this.selectedOption && this.selectedOption.value;\n    }\n\n    /**\n     * The value of this form control, that is, of the first selected option.\n     *\n     * @param {String} value\n     */\n    set value(value) {\n        return this.selectedOption.value = value;\n    }\n\n    get willValidate() {\n        throw new Error('Not implemented');\n    }\n\n    set willValidate(value) {\n        throw new Error('willValidate is read only');\n    }\n\n\n    /**\n     * Gets an item from the options collection for this select element.\n     *\n     * @param {Number} index\n     * @return {HTMLOptionElement}\n     */\n    item(index) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Gets the item in the options collection with the specified name.\n     * The name string can match either the id or the name attribute of an option node\n     *\n     * @param {String} name\n     * @return {HTMLOptionElement}\n     */\n    namedItem(name) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Removes the element at the specified index from the options collection for this select element.\n     *\n     * @param {Number} index\n     */\n    remove(index) {\n        throw new Error('Not implemented');\n    }\n}\n"]}