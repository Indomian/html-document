{"version":3,"sources":["../../../src/HTMLElement/elements/HTMLSelectElement.js"],"names":[],"mappings":"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","file":"HTMLSelectElement.js","sourcesContent":["import HTMLElement from '../../HTMLElement';\n\n/**\n * HTML select elements share all of the properties and methods\n * of other HTML elements described in the element section.\n * They also have the specialized interface HTMLSelectElement.\n *\n * @see https://developer.mozilla.org/en/docs/Web/API/HTMLSelectElement\n * @class HTMLSelectElement\n *\n */\nexport default class HTMLSelectElement extends HTMLElement {\n    /**\n     * Is a Boolean that reflects the autofocus HTML attribute,\n     * which indicates whether the control should have input focus when the page loads,\n     * unless the user overrides it, for example by typing in a different control.\n     * Only one form-associated element in a document can have this attribute specified\n     *\n     * @type {boolean}\n     */\n    get autoFocus() {\n        return this.hasAttribute('autofocus');\n    }\n\n    set autoFocus(value) {\n        if (value) {\n            this.setAttribute('autofocus', '');\n        } else {\n            this.removeAttribute('autofocus');\n        }\n    }\n    /**\n     * Is a Boolean that reflects the disabled HTML attribute,\n     * which indicates whether the control is disabled.\n     * If it is disabled, it does not accept clicks.\n     *\n     * @type {boolean}\n     */\n    get disabled() {\n        return this.hasAttribute('disabled');\n    }\n\n    set disabled(value) {\n        if (value) {\n            this.setAttribute('disabled', 'disabled');\n        } else {\n            this.removeAttribute('disabled');\n        }\n    }\n\n    /**\n     * The form that this element is associated with. If this element is a descendant of a form element,\n     * then this attribute is the ID of that form element.\n     * If the element is not a descendant of a form element, then:\n     * The attribute can be the ID of any form element in the same document.\n     *\n     * @type {HTMLFormElement}\n     * @readonly\n     */\n    get form() {\n        return this._closestParent('form') || null;\n    }\n\n    set form(value) {\n        throw new Error('form is read only');\n    }\n\n    /**\n     * Returns a NodeList containing the list of label elements associated with this select element.\n     *\n     * @type {HTMLLabelElement[]}\n     * @readonly\n     */\n    get labels() {\n        if (!this.hasAttribute('id')) {\n            return [];\n        }\n\n        const id = this.getAttribute('id');\n        const highestParent = this._highestParent();\n\n        if (!highestParent) {\n            return [];\n        }\n\n        return highestParent._filterDescendantNodes(node => {\n            return node.tagName === 'label' && node.getAttribute('for') === id;\n        });\n    }\n\n    /**\n     * The number of option elements in this select element.\n     *\n     * @type {Number}\n     * @readonly\n     */\n    get length() {\n        return this.options.length;\n    }\n\n    set length(value) {\n        throw new Error('length is read only');\n    }\n\n    /**\n     * Reflects the multiple HTML attribute, which indicates whether multiple items can be selected.\n     *\n     * @type {Boolean}\n     */\n    get multiple() {\n        return this.hasAttribute('multiple');\n    }\n\n    set multiple(multiple) {\n        if (multiple) {\n            this.setAttribute('multiple', 'multiple');\n        } else {\n            this.removeAttribute('multiple');\n        }\n    }\n\n    /**\n     * Reflects the name HTML attribute, containing the name of this control\n     * used by servers and DOM search functions.\n     *\n     * @type {String}\n     */\n    get name() {\n        return this.getAttribute('name');\n    }\n\n    set name(name) {\n        this.setAttribute('name', name);\n    }\n\n    /**\n     * The set of option elements contained by this element.\n     *\n     * @type {Array.<Element>}\n     * @readonly\n     */\n    get options() {\n        return this.getElementsByTagName('option');\n    }\n\n    set options(value) {\n        throw new Error('options is read only');\n    }\n\n    /**\n     * Reflects the required HTML attribute, which indicates whether the user is required\n     * to select a value before submitting the form\n     *\n     * @type {Boolean} HTMLSelectElement#required\n     */\n    get required() {\n        return this.hasAttribute('required');\n    }\n\n    set required(required) {\n        if (required) {\n            this.setAttribute('required', 'required');\n        } else {\n            this.removeAttribute('required');\n        }\n    }\n\n    /**\n     * The index of the first selected option element.\n     * The value -1 is returned if no element is selected.\n     *\n     * @type {Number}\n     */\n    get selectedIndex() {\n        let index = -1;\n        let emptyIndex = -1;\n        const options = this.options;\n\n        if (!options.length) {\n            return index;\n        }\n\n        options.some(function(option, idx) {\n            if (option.selected) {\n                index = idx;\n                return true;\n            }\n\n            if (emptyIndex === -1 && option.value === '') {\n                emptyIndex = idx;\n            }\n        });\n\n        if (index === -1 && !this.multiple) {\n            index = emptyIndex;\n\n            if (index === -1) {\n                return 0;\n            }\n        }\n\n        return index;\n    }\n\n    set selectedIndex(index) {\n        this.selectedOptions.forEach(option => option.selected = false);\n        this.options[index].selected = true;\n    }\n\n    /**\n     * The set of options that are selected.\n     *\n     * @type {Array.<Element>}\n     * @readonly\n     */\n    get selectedOptions() {\n        return this.options.filter(function(option) {\n            return option.selected;\n        });\n    }\n\n    /**\n     * The first selected option.\n     *\n     * @type {HtmlOptionElement|null}\n     * @readonly\n     */\n    get selectedOption() {\n        let selectedIndex = this.selectedIndex;\n\n        if (selectedIndex === -1) {\n            return null;\n        }\n\n        return this.options[selectedIndex];\n    }\n\n    /**\n     * Reflects the size HTML attribute, which contains the number of visible items in the control.\n     * The default is 1, unless multiple is true, in which case it is 4.\n     *\n     * @type {Number}\n     */\n    get size() {\n        return Number(this.getAttribute('size')) || (this.multiple ? 4 : 1);\n    }\n\n    set size(size) {\n        this.setAttribute('size', size);\n    }\n\n    get tabIndex() {\n        throw new Error('Obsolete since HTML5');\n    }\n\n    /**\n     * The form control's type. When multiple is true, it returns select-multiple; otherwise, it returns select-one.\n     * Read only.\n     *\n     * @member {Number} HTMLSelectElement#size\n     * @readonly\n     */\n    get type() {\n        return this.multiple ? 'select-multiple' : 'select-one';\n    }\n\n    set type(value) {\n        throw new Error('type is read only');\n    }\n\n    get validationMessage() {\n        throw new Error('Not implemented');\n    }\n\n    set validationMessage(value) {\n        throw new Error('validationMessage is read only');\n    }\n\n    get validity() {\n        throw new Error('Not implemented');\n    }\n\n    set validity(value) {\n        throw new Error('validity is read only');\n    }\n\n    /**\n     * The value of this form control, that is, of the first selected option.\n     *\n     * @member {String} HTMLSelectElement#value\n     */\n    get value() {\n        return this.selectedOption && this.selectedOption.value;\n    }\n\n    /**\n     * @ignore\n     * @param {String} value\n     */\n    set value(value) {\n        this.selectedOption.value = value;\n        return value;\n    }\n\n    get willValidate() {\n        throw new Error('Not implemented');\n    }\n\n    set willValidate(value) {\n        throw new Error('willValidate is read only');\n    }\n\n    /**\n     * Gets an item from the options collection for this select element.\n     *\n     * @param {Number} index\n     * @ return {HTMLSelectElement}\n     */\n    item(index) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Gets the item in the options collection with the specified name.\n     * The name string can match either the id or the name attribute of an option node\n     *\n     * @ignore Not implemented\n     * @method HTMLSelectElement#namedItem\n     * @param {String} name\n     * @ return {HTMLSelectElement}\n     */\n    namedItem(name) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Removes the element at the specified index from the options collection for this select element.\n     *\n     * @ignore Not implemented\n     * @method HTMLSelectElement#remove\n     * @param {Number} index\n     */\n    remove(index) {\n        throw new Error('Not implemented');\n    }\n}\n\n/**\n * @constant {string} HTMLSelectElement#nodeName option\n */\nObject.defineProperty(HTMLSelectElement.prototype, 'nodeName', { value: 'select' });\n"]}